%button.hangup{onclick: "check_rooms();"}
  check

%button.hangup{onclick: "hangup();"}
  Hangup

%button.hangup{onclick: "check_logs();"}
  Logs

#log Loading pigeons...

%div.agent_name= "Agent name: #{current_user.name}"

%ul#people

#dialog-confirm{title: "Accept the call?"}
  %p

:javascript
  var callLength;
  var currentCalller;
  Twilio.Device.setup("#{token}", {debug: true});

  Twilio.Device.ready(function (device) {
    $("#log").text("Ready");
  });

  Twilio.Device.error(function (error) {
    $("#log").text("Error: " + error.message);
  });

  Twilio.Device.connect(function (conn) {
    callLength = $.now();
    $("#log").text("Successfully established call");
  });

  Twilio.Device.disconnect(function (conn) {
    show_call_end_status();
  });

  Twilio.Device.cancel(function (conn) {
    show_call_end_status();
  });

  Twilio.Device.incoming(function (conn) {
    var message = "";

    if (conn.parameters.From.match(/^client:/) == null) {
      message = "Incoming user call from " + conn.parameters.From + ". Pickup?";
    } else if (conn.parameters.From != conn.parameters.To) {
      message = "Incoming conference request from " + conn.parameters.From + " accept?";
    }

    $("#dialog-confirm").find('p').html(message);

    $("#dialog-confirm").dialog({
      resizable: true,
      modal: true,
      buttons: {
        "Accept": function() {
          if (conn.parameters.From.match(/^client:/) == null) {
            currentCalller = conn.parameters.From;
          }
          conn.accept();
          $(this).dialog("close");
        },
        Cancel: function() {
          conn.disconnect();
          $(this).dialog("close");
        }
      }
    });
  });

  Twilio.Device.presence(function (pres) {
    if (pres.available) {
      if ($("ul#people").find("li#" + pres.from).size() == 0) {
        $("<li>", {id: pres.from, text: pres.from}).click(function () {
          conference(pres.from, currentCalller);
        }).prependTo("#people");
      }
    } else {
      $("#" + pres.from).remove();
    }
  });

  function show_call_end_status() {
    $("#dialog-confirm").dialog("close");
    var difference = ($.now() - callLength) / 1000;
    currentCalller = "";

    if (isNaN(difference)) {
      var message = "Call ended";
    } else {
      var message = "Call ended. Call lasted " + difference + " seconds";
    }

    $("#log").text(message);
  }

  function conference(name, number) {
    $.post("http://my-med-labs-call-center.herokuapp.com/init_conference", { agent: name, from: number } );
  }

  function check_rooms() {
    $.post("http://my-med-labs-call-center.herokuapp.com/check_rooms");
  }

  function check_logs() {
    $.post("http://my-med-labs-call-center.herokuapp.com/check_logs");
  }

  function hangup() {
    Twilio.Device.disconnectAll();
  }
