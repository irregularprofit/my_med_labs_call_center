.span9

  .buttons-container.centered.row-fluid
    %input#ToNumber{name: "ToNumber", placeholder: "Enter a phone number to call", type: "text"}/

    %button{onclick: "dial();", class: "btn btn-large btn-success"}
      dial

  .buttons-container.centered.row-fluid
    %button{onclick: "check_rooms();", class: "btn btn-large btn-success"}
      check
    %button{onclick: "hangup();", class: "btn btn-large btn-danger"}
      Hangup
    %button{onclick: "check_logs();", class: "btn btn-large"}
      Logs
  .clearfix
  %br
  %br
  %br
  %h4 Current Call Status
  #log Loading pigeons...

  %div.agent_name= "Agent name: #{current_user.name}"

.span3.people-container
  %h3 Add Agent To Call
  %ul.nav.nav-pills.nav-stacked#people

#dialog-confirm{class: 'incoming_call_notification', title: "Accept the call?"}
  %p

:javascript
  var callLength;
  var currentCalller;

  Twilio.Device.setup("#{token}", {debug: true});

  Twilio.Device.ready(function (device) {
    $("#log").text("Ready");
  });

  Twilio.Device.error(function (error) {
    $("#log").text("Error: " + error.message);
  });

  Twilio.Device.connect(function (conn) {
    callLength = $.now();
    $("#log").text("Successfully established call");
  });

  Twilio.Device.disconnect(function (conn) {
    show_call_end_status(conn);
  });

  Twilio.Device.cancel(function (conn) {
    show_call_end_status(conn);
  });

  Twilio.Device.incoming(function (conn) {
    var on_call = "#{current_user.on_call?}";
    if (on_call == "true") {

      var message = "";

      if (conn.parameters.From.match(/^client:/) == null) {
        message = "Incoming user call from " + conn.parameters.From + ". Pickup?";
      } else if (conn.parameters.From != conn.parameters.To) {
        message = "Incoming conference request from " + conn.parameters.From + " accept?";
      }

      $(".incoming_call_notification").find('p').html(message);

      var functional_id = ("dialog-confirm" + conn.parameters.From).replace(" ", "-");

      $(".incoming_call_notification").clone().dialog({
        resizable: true,
        modal: true,
        buttons: {
          "Accept": function() {
            if (conn.parameters.From.match(/^client:/) == null) {
              currentCalller = conn.parameters.From;
            }
            conn.accept();
            $(this).dialog("close");
            $(this).remove();
          },
          Cancel: function() {
            conn.disconnect();
            $(this).dialog("close");
            $(this).remove();
          }
        }
      }).attr('id', functional_id);

    }
  });

  Twilio.Device.presence(function (pres) {
    if (pres.available) {
      if ($("ul#people").find("li#" + pres.from).size() == 0) {
        $("<li>", {id: pres.from, text: pres.from}).click(function () {
          conference(pres.from, currentCalller);
        }).prependTo("#people");
      }
    } else {
      $("#" + pres.from).remove();
    }
  });

  function show_call_end_status(conn) {
    var functional_id = ("dialog-confirm" + conn.parameters.From).replace(" ", "-");
    // maybe only close the call that was otherwise picked
    $("#" + functional_id).dialog("close");
    $("#" + functional_id).remove();

    var difference = ($.now() - callLength) / 1000;
    currentCalller = "";

    if (isNaN(difference)) {
      var message = "Call ended";
    } else {
      var message = "Call ended. Call lasted " + difference + " seconds";
    }

    $("#log").text(message);
  }

  function conference(name, number) {
    $.post("http://my-med-labs-call-center.herokuapp.com/init_conference", { agent: name, from: number } );
  }

  function dial() {
    params = {"PhoneNumber": $("#ToNumber").val()};
    Twilio.Device.connect(params);
  }

  function check_rooms() {
    $.post("http://my-med-labs-call-center.herokuapp.com/check_rooms");
  }

  function check_logs() {
    $.post("http://my-med-labs-call-center.herokuapp.com/check_logs");
  }

  function hangup() {
    Twilio.Device.disconnectAll();
  }
